[ 
  {
    "code": "def get_first(lst):\n    return lst[0]",
    "label": "O(1)"
  },
  {
    "code": "def is_even(n):\n    return n % 2 == 0",
    "label": "O(1)"
  },
  {
    "code": "def access_dict(d, key):\n    return d.get(key, -1)",
    "label": "O(1)"
  },
  {
    "code": "def sum_two(a, b):\n    return a + b",
    "label": "O(1)"
  },
  {
    "code": "def set_last(lst, val):\n    lst[-1] = val\n    return lst",
    "label": "O(1)"
  },
  {
    "code": "def toggle(flag):\n    return not flag",
    "label": "O(1)"
  },
  {
    "code": "def get_length_tuple(t):\n    return len(t)",
    "label": "O(1)"
  },
  {
    "code": "def pop_stack(stack):\n    return stack.pop()",
    "label": "O(1)"
  },
  {
    "code": "def is_empty_dict(d):\n    return not d",
    "label": "O(1)"
  },
  {
    "code": "def get_ascii(c):\n    return ord(c)",
    "label": "O(1)"
  },


  {
    "code": "def binary_search(arr, x):\n    l, r = 0, len(arr)-1\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] == x:\n            return m\n        elif arr[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1",
    "label": "O(log n)"
  },
  {
    "code": "def divide_to_one(n):\n    steps = 0\n    while n > 1:\n        n //= 2\n        steps += 1\n    return steps",
    "label": "O(log n)"
  },
  {
    "code": "def find_power_of_two(n):\n    p = 1\n    while p * 2 <= n:\n        p *= 2\n    return p",
    "label": "O(log n)"
  },
  {
    "code": "def integer_sqrt(n):\n    l, r = 0, n\n    while l <= r:\n        m = (l + r) // 2\n        if m * m == n:\n            return m\n        elif m * m < n:\n            l = m + 1\n        else:\n            r = m - 1\n    return r",
    "label": "O(log n)"
  },
  {
    "code": "def log_base_k(n, k):\n    count = 0\n    while n >= k:\n        n //= k\n        count += 1\n    return count",
    "label": "O(log n)"
  },
  {
    "code": "def find_leftmost(arr, x):\n    l, r = 0, len(arr)-1\n    res = -1\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] == x:\n            res = m\n            r = m - 1\n        elif arr[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return res",
    "label": "O(log n)"
  },
  {
    "code": "def find_rightmost(arr, x):\n    l, r = 0, len(arr)-1\n    res = -1\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] == x:\n            res = m\n            l = m + 1\n        elif arr[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return res",
    "label": "O(log n)"
  },
  {
    "code": "def upper_bound(arr, x):\n    l, r = 0, len(arr)\n    while l < r:\n        m = (l + r) // 2\n        if arr[m] <= x:\n            l = m + 1\n        else:\n            r = m\n    return l",
    "label": "O(log n)"
  },
  {
    "code": "def log_divide(n):\n    count = 0\n    while n > 0:\n        n //= 5\n        count += 1\n    return count",
    "label": "O(log n)"
  },
  {
    "code": "def find_peak(arr):\n    l, r = 0, len(arr)-1\n    while l < r:\n        m = (l + r) // 2\n        if arr[m] < arr[m+1]:\n            l = m + 1\n        else:\n            r = m\n    return l",
    "label": "O(log n)"
  },

  {
    "code": "def sum_list(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total",
    "label": "O(n)"
  },
  {
    "code": "def exists_greater_than(lst, k):\n    for x in lst:\n        if x > k:\n            return True\n    return False",
    "label": "O(n)"
  },
  {
    "code": "def filter_even(lst):\n    return [x for x in lst if x % 2 == 0]",
    "label": "O(n)"
  },
  {
    "code": "def normalize(lst):\n    m = max(lst)\n    return [x/m for x in lst]",
    "label": "O(n)"
  },
  {
    "code": "def count_zeros(lst):\n    return sum(1 for x in lst if x == 0)",
    "label": "O(n)"
  },
  {
    "code": "def all_positive(lst):\n    return all(x > 0 for x in lst)",
    "label": "O(n)"
  },
  {
    "code": "def reverse_string(s):\n    return s[::-1]",
    "label": "O(n)"
  },
  {
    "code": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
    "label": "O(n)"
  },
  {
    "code": "def copy_dict(d):\n    new = {}\n    for k, v in d.items():\n        new[k] = v\n    return new",
    "label": "O(n)"
  },
  {
    "code": "def remove_duplicates(lst):\n    result = []\n    seen = set()\n    for x in lst:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result",
    "label": "O(n)"
  },

  {
    "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1",
    "label": "O(n log n)"
  },
  {
    "code": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        p = arr[len(arr)//2]\n        left = [x for x in arr if x < p]\n        mid = [x for x in arr if x == p]\n        right = [x for x in arr if x > p]\n        return quicksort(left) + mid + quicksort(right)",
    "label": "O(n log n)"
  },
  {
    "code": "def heap_sort(arr):\n    import heapq\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in range(len(arr))]",
    "label": "O(n log n)"
  },
  {
    "code": "def sort_and_count(lst):\n    a = sorted(lst)\n    return a.count(a[0])",
    "label": "O(n log n)"
  },
  {
    "code": "def unique_sorted(lst):\n    return sorted(set(lst))",
    "label": "O(n log n)"
  },
  {
    "code": "def word_sort(words):\n    return sorted(words, key=lambda w: w.lower())",
    "label": "O(n log n)"
  },
  {
    "code": "def sorted_indices(arr):\n    return sorted(range(len(arr)), key=lambda i: arr[i])",
    "label": "O(n log n)"
  },
  {
    "code": "def merge_lists(a, b):\n    return sorted(a + b)",
    "label": "O(n log n)"
  },
  {
    "code": "def sort_by_length(strings):\n    return sorted(strings, key=len)",
    "label": "O(n log n)"
  },
  {
    "code": "def rank_sort(arr):\n    return sorted(arr, reverse=True)",
    "label": "O(n log n)"
  },

  {
    "code": "def duplicates_bruteforce(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return True\n    return False",
    "label": "O(n^2)"
  },
  {
    "code": "def all_pairs(lst):\n    pairs = []\n    for i in lst:\n        for j in lst:\n            pairs.append((i, j))\n    return pairs",
    "label": "O(n^2)"
  },
  {
    "code": "def matrix_add(A, B):\n    n = len(A)\n    C = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            C[i][j] = A[i][j] + B[i][j]\n    return C",
    "label": "O(n^2)"
  },
  {
    "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]",
    "label": "O(n^2)"
  },
  {
    "code": "def transponer(matriz):\n    n = len(matriz)\n    t = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            t[j][i] = matriz[i][j]\n    return t",
    "label": "O(n^2)"
  },
  {
    "code": "def all_substrings(s):\n    result = []\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(s[i:j])\n    return result",
    "label": "O(n^2)"
  },
  {
    "code": "def count_inversions(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "label": "O(n^2)"
  },
  {
    "code": "def diagonal_sum(m):\n    n = len(m)\n    s = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                s += m[i][j]\n    return s",
    "label": "O(n^2)"
  },
  {
    "code": "def symmetric_matrix(m):\n    n = len(m)\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] != m[j][i]:\n                return False\n    return True",
    "label": "O(n^2)"
  },
  {
    "code": "def find_zero_sum_pairs(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 0:\n                result.append((lst[i], lst[j]))\n    return result",
    "label": "O(n^2)"
  },

  {
    "code": "def triple_sum_zero(nums):\n    n = len(nums)\n    triplets = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    triplets.append((nums[i], nums[j], nums[k]))\n    return triplets",
    "label": "O(n^3)"
  },
  {
    "code": "def cube_matrix(m):\n    n = len(m)\n    result = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j][k] = m[i][j]*m[j][k]*m[k][i]\n    return result",
    "label": "O(n^3)"
  },
  {
    "code": "def triple_nested(lst):\n    count = 0\n    for a in lst:\n        for b in lst:\n            for c in lst:\n                count += a + b + c\n    return count",
    "label": "O(n^3)"
  },
  {
    "code": "def all_triplets(lst):\n    result = []\n    for i in lst:\n        for j in lst:\n            for k in lst:\n                result.append((i, j, k))\n    return result",
    "label": "O(n^3)"
  },
  {
    "code": "def matrix_mult(A, B, C):\n    n = len(A)\n    D = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                D[i][j] += A[i][k]*B[k][j]*C[j][i]\n    return D",
    "label": "O(n^3)"
  },
  {
    "code": "def count_equal_triplets(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            for k in range(len(lst)):\n                if lst[i] == lst[j] == lst[k]:\n                    count += 1\n    return count",
    "label": "O(n^3)"
  },
  {
    "code": "def all_triplet_products(nums):\n    n = len(nums)\n    prods = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                prods.append(nums[i]*nums[j]*nums[k])\n    return prods",
    "label": "O(n^3)"
  },
  {
    "code": "def triplet_indices_sum(n):\n    total = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                total += i + j + k\n    return total",
    "label": "O(n^3)"
  },
  {
    "code": "def symmetric_3d_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if M[i][j][k] != M[k][j][i]:\n                    return False\n    return True",
    "label": "O(n^3)"
  },
  {
    "code": "def count_triplets(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                count += 1\n    return count",
    "label": "O(n^3)"
  },

  {
    "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
    "label": "O(2^n)"
  },
  {
    "code": "def subsets(nums):\n    res = []\n    def backtrack(path, idx):\n        res.append(list(path))\n        for i in range(idx, len(nums)):\n            path.append(nums[i])\n            backtrack(path, i+1)\n            path.pop()\n    backtrack([], 0)\n    return res",
    "label": "O(2^n)"
  },
  {
    "code": "def hanoi(n, src, dest, aux):\n    if n == 1:\n        return [(src, dest)]\n    return hanoi(n-1, src, aux, dest) + [(src, dest)] + hanoi(n-1, aux, dest, src)",
    "label": "O(2^n)"
  },
  {
    "code": "def all_binary_strings(n):\n    if n == 0:\n        return ['']\n    res = []\n    for s in all_binary_strings(n-1):\n        res.append('0'+s)\n        res.append('1'+s)\n    return res",
    "label": "O(2^n)"
  },
  {
    "code": "def power_set(s):\n    res = [[]]\n    for elem in s:\n        res += [x+[elem] for x in res]\n    return res",
    "label": "O(2^n)"
  },
  {
    "code": "def count_subsets(nums):\n    if not nums:\n        return 1\n    return count_subsets(nums[1:]) + count_subsets(nums[1:])",
    "label": "O(2^n)"
  },
  {
    "code": "def can_sum(nums, target):\n    if target == 0:\n        return True\n    if not nums:\n        return False\n    return can_sum(nums[1:], target) or can_sum(nums[1:], target-nums[0])",
    "label": "O(2^n)"
  },
  {
    "code": "def all_combinations(s):\n    if not s:\n        return ['']\n    first = s[0]\n    rest = all_combinations(s[1:])\n    return rest + [first + comb for comb in rest]",
    "label": "O(2^n)"
  },
  {
    "code": "def string_partitions(s):\n    if not s:\n        return [[]]\n    res = []\n    for i in range(1, len(s)+1):\n        for part in string_partitions(s[i:]):\n            res.append([s[:i]] + part)\n    return res",
    "label": "O(2^n)"
  },
  {
    "code": "def all_parentheses(n, s='', left=0, right=0):\n    if len(s) == 2*n:\n        return [s]\n    res = []\n    if left < n:\n        res += all_parentheses(n, s+'(', left+1, right)\n    if right < left:\n        res += all_parentheses(n, s+')', left, right+1)\n    return res",
    "label": "O(2^n)"
  },


  {
    "code": "def permutations(lst):\n    if not lst:\n        return [[]]\n    res = []\n    for i in range(len(lst)):\n        for p in permutations(lst[:i]+lst[i+1:]):\n            res.append([lst[i]]+p)\n    return res",
    "label": "O(n!)"
  },
  {
    "code": "def unique_permutations(nums):\n    res = []\n    def backtrack(path, used):\n        if len(path) == len(nums):\n            res.append(list(path))\n            return\n        for i in range(len(nums)):\n            if used[i]: continue\n            used[i] = True\n            path.append(nums[i])\n            backtrack(path, used)\n            path.pop()\n            used[i] = False\n    backtrack([], [False]*len(nums))\n    return res",
    "label": "O(n!)"
  },
  {
    "code": "def all_arrangements(s):\n    if len(s) <= 1:\n        return [s]\n    result = []\n    for i, c in enumerate(s):\n        for perm in all_arrangements(s[:i]+s[i+1:]):\n            result.append(c+perm)\n    return result",
    "label": "O(n!)"
  },
  {
    "code": "from itertools import permutations\ndef use_permutations(l):\n    return list(permutations(l))",
    "label": "O(n!)"
  },
  {
    "code": "def permute_colors(colors):\n    if len(colors) == 1:\n        return [colors]\n    res = []\n    for i in range(len(colors)):\n        rest = colors[:i] + colors[i+1:]\n        for p in permute_colors(rest):\n            res.append([colors[i]] + p)\n    return res",
    "label": "O(n!)"
  },
  {
    "code": "def all_seatings(people):\n    if not people:\n        return [[]]\n    res = []\n    for i in range(len(people)):\n        for p in all_seatings(people[:i] + people[i+1:]):\n            res.append([people[i]] + p)\n    return res",
    "label": "O(n!)"
  },
  {
    "code": "def string_permutations(s):\n    if len(s) == 0:\n        return ['']\n    perms = []\n    for i in range(len(s)):\n        for perm in string_permutations(s[:i]+s[i+1:]):\n            perms.append(s[i]+perm)\n    return perms",
    "label": "O(n!)"
  },
  {
    "code": "def get_anagrams(word):\n    if len(word) <= 1:\n        return [word]\n    anagrams = []\n    for i, c in enumerate(word):\n        for sub in get_anagrams(word[:i]+word[i+1:]):\n            anagrams.append(c+sub)\n    return anagrams",
    "label": "O(n!)"
  },
  {
    "code": "def all_permutation_tuples(t):\n    if len(t) == 0:\n        return [()]\n    res = []\n    for i in range(len(t)):\n        for perm in all_permutation_tuples(t[:i]+t[i+1:]):\n            res.append((t[i],) + perm)\n    return res",
    "label": "O(n!)"
  },
  {
    "code": "def permute_numbers(nums):\n    if not nums:\n        return [[]]\n    result = []\n    for i in range(len(nums)):\n        n = nums[i]\n        rest = nums[:i] + nums[i+1:]\n        for p in permute_numbers(rest):\n            result.append([n] + p)\n    return result",
    "label": "O(n!)"
  }
]